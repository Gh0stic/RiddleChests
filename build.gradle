buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

repositories {
    maven {
        name 'davenonymous maven'
        url "http://maven.davenonymous.com/repository/maven-releases"
    }
}

import net.minecraftforge.gradle.common.task.SignJar

version = "${mod_version}"
group = 'com.davenonymous.riddlechests' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'riddlechests'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'snapshot', version: '20191226-1.14.3'
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                riddlechests {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                riddlechests {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'riddlechests', '--all', '--output', file('src/generated/resources/')

            mods {
                riddlechests {
                    source sourceSets.main
                }
            }
        }
    }
}

def libFolder = file("libs")
if(libFolder.exists()) {
    libFolder.eachFileMatch(~/.*\.jar$/) { file ->
        def splitPos = file.name.lastIndexOf("-")
        def modartifact = file.name.substring(0, splitPos)
        def modversion = file.name.substring(splitPos + 1, file.name.length() - 4)
        def modreference = "foobar:$modartifact:$modversion"

        dependencies {
            runtimeOnly fg.deobf(project.dependencies.create(modreference) {
                transitive = false
            })
        }
    }
}


dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft "net.minecraftforge:forge:${forge_version}"

    if (findProject(':Libnonymous') != null) {
        compile project(':Libnonymous')
    } else {
        compile fg.deobf ("com.davenonymous.libnonymous:libnonymous-1.14.4:${libnonymous_version}:")
    }

}

allprojects {
    if (System.getenv("GITHUB_BUILD") != null) {
        version += ".${System.getenv("BUILD_NUMBER")}"
    }
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
            "Specification-Title": "riddlechests",
            "Specification-Vendor": "Davenonymous",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"Davenonymous",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
        ])
    }
}


task sourcesJar(type: Jar) {
    classifier = "sources"
    from sourceSets.main.allJava
}

task deobfJar(type: Jar) {
    classifier = "deobf"
    from sourceSets.main.output
    manifest {
        attributes([
                "Specification-Title": "riddlechests",
                "Specification-Vendor": "Davenonymous",
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": "${version}",
                "Implementation-Vendor" :"Davenonymous",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
        ])
    }
}

task signJar(type: SignJar, dependsOn: jar) {

    // Skips if the keyStore property is missing.
    onlyIf {
        project.hasProperty('keyStore')
    }

    // findProperty allows us to reference the property without it existing.
    // Using project.propName would cause the script to fail validation if
    // the property did not exist.
    keyStore = project.findProperty('keyStore')
    alias = project.findProperty('keyStoreAlias')
    storePass = System.getenv("JARSIGN_KEY_PASS")
    keyPass = System.getenv("JARSIGN_KEY_PASS")
    inputFile = jar.archivePath
    outputFile = jar.archivePath
}

// Runs this task automatically when build is ran.
build.dependsOn signJar

def reobfFile = file("$buildDir/tmp/signJar/riddlechests-${version}.jar.signed.tmp")
def reobfArtifact = artifacts.add('default', reobfFile) {
    type 'jar'
    builtBy 'signJar'
}
reobfArtifact.extension = "jar"
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact reobfArtifact
            artifact sourcesJar
            artifact deobfJar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/thraaawn/RiddleChests")
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
        maven {
            name = "davenonymous maven"
            url = uri("http://maven.davenonymous.com/repository/maven-releases")
            credentials {
                username = "davenonymous"
                password = System.getenv("DAVE_MAVEN_PASSWORD")
            }
        }
    }
}